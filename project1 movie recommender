{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"private_outputs":true,"provenance":[{"file_id":"1gxllWrPzXD6RHynHHNrk5cxkHqhGMYo2","timestamp":1751082760927}],"authorship_tag":"ABX9TyOIpxR1ac+F9PeR4Gy/EFys"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, confusion_matrix\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","\n","\n","\n","import scipy.sparse as sp\n","from scipy.sparse.linalg import svds\n","\n","\n","\n","import os\n","for dirname, _, filenames in os.walk('/kaggle/input'):\n","    for filename in filenames:\n","        print(os.path.join(dirname, filename))"],"metadata":{"id":"z_ByWjjihOWK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movie = pd.read_csv('/content/movies.csv')"],"metadata":{"id":"mHRFWlDphOXg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movie_ratings.head()"],"metadata":{"id":"4kfQhGqShOas"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movies = pd.read_csv('/content/movies.csv')\n","movies.head()\n","\n"],"metadata":{"id":"2j1fSib0hvBi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movie_data = movie_ratings.merge(movies, on ='movieId')\n","movie_data.head()\n"],"metadata":{"id":"jImKF5qahu_R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movie.head()\n"],"metadata":{"id":"KV66FT0FkcdX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movie.shape"],"metadata":{"id":"Uq_cN8O-kcaa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movie.tail(7)"],"metadata":{"id":"ypdyzaqYkcX7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movie.info(5)"],"metadata":{"id":"KkPBpZZRkcWY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["movies.isnull().sum()\n","print(\"\\n\")\n","movie.isnull().sum()\n"],"metadata":{"id":"xtIwBJbhk-RE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def recommender( movie_name, matrix, n_recs):\n","    idx = process.extractOne(movie_name,movies['title'])[2]\n","    print(idx)\n","    print('Movie selected: ',movies['title'][idx], 'Index: ', idx)\n","    print(\"Searching Recommendations......\")\n","    distance, indices = knn_model.kneighbors(matrix[idx], n_neighbors= n_recs)\n","    for i in indices:\n","        print(movies['title'][i].where(i!=idx))"],"metadata":{"id":"Jz-UIq2Fhuys"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train, test = train_test_split(movie, test_size=0.2, random_state=42)\n"],"metadata":{"id":"s0RfoMjtiiRV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class HybridDataset(Dataset):\n","\n","\n","\n","    def __init__(self, user_indices, movie_indices, genres, ratings):\n","        self.user_indices = torch.tensor(user_indices, dtype=torch.long)\n","        self.movie_indices = torch.tensor(movie_indices, dtype=torch.long)\n","        self.genres = torch.stack(genres)  # Stack the list of tensors\n","        self.ratings = torch.tensor(ratings, dtype=torch.float32)\n","\n","    def __len__(self):\n","        return len(self.user_indices)\n","\n","    def __getitem__(self, idx):\n","        return self.user_indices[idx], self.movie_indices[idx], self.genres[idx], self.ratings[idx]"],"metadata":{"id":"K98sgDWXiiPk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class HybridModel(nn.Module):\n","\n","    def __init__(self, num_users, num_movies, num_genres, embedding_size, hidden_size, dropout_rate=0.5):\n","        super(HybridModel, self).__init__()\n","        self.user_embedding = nn.Embedding(num_users, embedding_size)\n","        self.movie_embedding = nn.Embedding(num_movies, embedding_size)\n","        self.genre_layer = nn.Sequential(\n","            nn.Linear(num_genres, hidden_size),\n","            nn.ReLU(),\n","            nn.Dropout(dropout_rate),\n","            nn.Linear(hidden_size, embedding_size),  # Adjusted this layer\n","            nn.ReLU()\n","        )\n","        self.concat_layer = nn.Linear(embedding_size * 3, 1)\n","\n","    def forward(self, user_indices, movie_indices, genres):\n","        user_embedded = self.user_embedding(user_indices)\n","        movie_embedded = self.movie_embedding(movie_indices)\n","        genre_embedded = self.genre_layer(genres)\n","        concatenated = torch.cat([user_embedded, movie_embedded, genre_embedded], dim=1)\n","        output = self.concat_layer(concatenated).squeeze()\n","\n","        return output"],"metadata":{"id":"SLbgcPHqpFQy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = HybridModel(num_users=len(movie), num_movies=len(movie), num_genres=len(movie['genres'].unique()),\n","                    embedding_size=50, hidden_size=64)\n"],"metadata":{"id":"w195xvlCpFMt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model"],"metadata":{"id":"ApQrkHOqpFLR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["criterion = nn.MSELoss()\n","optimizer = optim.Adam(model.parameters(), lr=0.001)\n"],"metadata":{"id":"0OQxs6Eppsxq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["accuracy = accuracy_score(binary_ratings, binary_predictions)\n","print(f'Accuracy: {accuracy:.4f}')\n","\n","# print confusion matrix\n","conf_matrix = confusion_matrix(binary_ratings, binary_predictions)\n","print('Confusion Matrix:')\n","print(conf_matrix)\n"],"metadata":{"id":"Ox_5XlwrqKNH"},"execution_count":null,"outputs":[]}]}